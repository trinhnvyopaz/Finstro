using Dapper;using Dapper.Contrib.Extensions;
using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Linq.Expressions;using System.Reflection;
using Finstro.Serverless.Dapper.Repository.Extensions;

namespace Finstro.Serverless.Dapper
{
    public abstract class Repository<T> where T : class    {        private readonly string _tableName;        private readonly string _primaryKey;        private readonly IDatabaseConnectionFactory _connectionFactory;        public Repository(string tableName)        {            _connectionFactory = new DatabaseConnectionFactory();            _tableName = tableName;            _primaryKey = "ID";        }        public Repository(string tableName, string primaryKey = "ID")        {            _connectionFactory = new DatabaseConnectionFactory();            _tableName = tableName;            _primaryKey = primaryKey;        }        public Repository(string connectionStringSettingKey, string tableName, string primaryKey = "ID")        {            _connectionFactory = new DatabaseConnectionFactory();            _tableName = tableName;            _primaryKey = primaryKey;        }        public Repository(IDatabaseConnectionFactory connectionFactory, string tableName, string primaryKey = "ID")        {            _connectionFactory = connectionFactory;            _tableName = tableName;            _primaryKey = primaryKey;        }        internal virtual dynamic Mapping(T item)        {            return item;        }        public virtual T Add(T item)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                var parameters = (object)Mapping(item);                cn.Open();                var param = new DynamicParameters();                foreach (PropertyInfo p in parameters.GetType().GetProperties())                {                    if (p.Name != _primaryKey)                    {                        object value = p.GetValue(parameters);

                        //if (p.PropertyType == typeof(bool) || p.PropertyType == typeof(System.Nullable<bool>))
                        //    value = Convert.ToInt16(value);

                        param.Add(name: ("p_" + p.Name).ToUpper(), value: value, direction: ParameterDirection.Input);                    }                }                if (!string.IsNullOrEmpty(_primaryKey))                {                    int id = cn.Insert<int>(_tableName, _primaryKey, param);                    PropertyInfo propertyInfo = item.GetType().GetProperty(_primaryKey);                    propertyInfo.SetValue(item, Convert.ChangeType(id, propertyInfo.PropertyType), null);                }                else                {                    cn.Insert<T>(_tableName, _primaryKey, param);                }                return item;            }        }        public virtual void Update(T item)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                var parameters = (object)Mapping(item);                var param = new DynamicParameters();                foreach (PropertyInfo p in parameters.GetType().GetProperties())                {                    object value = p.GetValue(parameters);                    if (p.PropertyType == typeof(bool) || p.PropertyType == typeof(System.Nullable<bool>))                        value = Convert.ToInt16(value);                    string pN = p.Name;                    var attType = p.CustomAttributes.FirstOrDefault();                    if (attType == null || attType.AttributeType.Name != "ComputedAttribute")                        param.Add(name: ("p_" + p.Name).ToUpper(), value: value, direction: ParameterDirection.Input);                }                cn.Open();                cn.Update(_tableName, _primaryKey, param);            }        }        public virtual void Remove(int id)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                cn.Execute("DELETE FROM " + _tableName + " WHERE " + _primaryKey + " =@ID", new { ID = id });            }        }        public virtual T Get(int id)        {            T item = default(T);            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                item = cn.Query<T>("SELECT * FROM [" + _tableName + "] WHERE " + _primaryKey + "=@ID", new { ID = id }).SingleOrDefault();            }            return item;        }        public virtual IEnumerable<T> Find(Expression<Func<T, bool>> predicate)        {            IEnumerable<T> items = null;

            // extract the dynamic sql query and parameters from predicate
            QueryResult result = DynamicQuery.GetDynamicQuery(_tableName, predicate);            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                items = cn.Query<T>(result.Sql, (object)result.Param);            }            return items;        }        public virtual IEnumerable<T> Get()        {            IEnumerable<T> items = null;            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                items = cn.Query<T>("SELECT * FROM " + _tableName);            }            return items;        }        public virtual IEnumerable<T> GetWithBasicFilter()        {            IEnumerable<T> items = null;            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                items = cn.Query<T>("SELECT TOP 500 * FROM " + _tableName);            }            return items;        }        public virtual IEnumerable<T> Get(string sqlQuery, object param = null)        {            IEnumerable<T> items = null;            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                items = cn.Query<T>(sqlQuery, param);            }            return items;        }        public virtual int GetInt(string sqlQuery, object param = null)        {            int item = 0;            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                item = cn.Query<int>(sqlQuery, param).FirstOrDefault();            }            return item;        }        public virtual IEnumerable<U> Get<U>(string sqlQuery, object param = null)        {            IEnumerable<U> items = null;            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                items = cn.Query<U>(sqlQuery, param);            }            return items;        }        public virtual int ExecuteQuery(string sqlQuery, object param = null)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                return cn.Execute(sqlQuery, param);            }        }        public virtual T ExecuteScalar<T>(string sqlQuery, object param = null)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                return cn.ExecuteScalar<T>(sqlQuery, param);            }        }        public void ExecuteQueryWithTransaction(string sqlQuery, object param = null)        {            using (IDbConnection cn = _connectionFactory.GetConnection())            {                cn.Open();                using (var tran = cn.BeginTransaction())                {                    try                    {                        cn.Execute(sqlQuery, param);                        tran.Commit();                    }                    catch (Exception)                    {                        tran.Rollback();                        throw;                    }                }            }        }    }
}
